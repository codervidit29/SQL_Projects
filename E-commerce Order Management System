-- ============================
-- 1. Schema Design
-- ============================

-- Customers Table
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    address TEXT,
    phone VARCHAR(15)
);

-- Products Table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2),
    stock_quantity INT
);

-- Orders Table
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    order_status VARCHAR(50),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Order_Items Table
CREATE TABLE order_items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Payments Table
CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    payment_date DATE,
    payment_amount DECIMAL(10, 2),
    payment_method VARCHAR(50),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Reviews Table
CREATE TABLE reviews (
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT,
    customer_id INT,
    review_date DATE,
    rating INT,
    review_text TEXT,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- ============================
-- 2. Sample Data Insertion
-- ============================

-- Insert sample customers
INSERT INTO customers (name, email, address, phone) 
VALUES 
    ('John Doe', 'john.doe@example.com', '123 Elm Street', '123-456-7890'),
    ('Jane Smith', 'jane.smith@example.com', '456 Oak Avenue', '987-654-3210');

-- Insert sample products
INSERT INTO products (product_name, price, stock_quantity) 
VALUES 
    ('Laptop', 1000.00, 50),
    ('Smartphone', 500.00, 200),
    ('Headphones', 150.00, 150);

-- Insert sample orders
INSERT INTO orders (customer_id, order_date, total_amount, order_status) 
VALUES 
    (1, '2025-01-01', 1500.00, 'Pending'),
    (2, '2025-01-02', 650.00, 'Completed');

-- Insert sample order items
INSERT INTO order_items (order_id, product_id, quantity, unit_price) 
VALUES 
    (1, 1, 1, 1000.00),
    (1, 2, 1, 500.00),
    (2, 2, 1, 500.00);

-- Insert sample payments
INSERT INTO payments (order_id, payment_date, payment_amount, payment_method) 
VALUES 
    (1, '2025-01-01', 1500.00, 'Credit Card'),
    (2, '2025-01-02', 650.00, 'PayPal');

-- Insert sample reviews
INSERT INTO reviews (product_id, customer_id, review_date, rating, review_text) 
VALUES 
    (1, 1, '2025-01-01', 5, 'Excellent laptop, highly recommend!'),
    (2, 2, '2025-01-02', 4, 'Good smartphone, but the camera could be better.');

-- ============================
-- 3. Advanced SQL Queries
-- ============================

-- Get Order Details with Total Cost per Order
SELECT 
    o.order_id, 
    o.order_date, 
    c.name AS customer_name, 
    SUM(oi.quantity * oi.unit_price) AS total_cost
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    products p ON oi.product_id = p.product_id
JOIN 
    customers c ON o.customer_id = c.customer_id
GROUP BY 
    o.order_id;

-- Find Customers Who Have Not Made a Purchase in the Last 30 Days
SELECT 
    c.customer_id, 
    c.name 
FROM 
    customers c
LEFT JOIN 
    orders o ON c.customer_id = o.customer_id AND o.order_date > DATE_SUB(CURDATE(), INTERVAL 30 DAY)
WHERE 
    o.order_id IS NULL;

-- Get the Top 5 Best-Selling Products
SELECT 
    p.product_name,
    SUM(oi.quantity) AS total_sold,
    RANK() OVER (ORDER BY SUM(oi.quantity) DESC) AS rank
FROM 
    order_items oi
JOIN 
    products p ON oi.product_id = p.product_id
GROUP BY 
    p.product_name
ORDER BY 
    rank
LIMIT 5;

-- Calculate the Average Rating for Each Product
SELECT 
    p.product_name, 
    AVG(r.rating) AS avg_rating
FROM 
    reviews r
JOIN 
    products p ON r.product_id = p.product_id
GROUP BY 
    p.product_name;

-- ============================
-- 4. Triggers and Stored Procedures
-- ============================

-- Trigger: Update Product Stock after Order is Placed
CREATE TRIGGER update_stock_after_order
AFTER INSERT ON order_items
FOR EACH ROW
BEGIN
    UPDATE products 
    SET stock_quantity = stock_quantity - NEW.quantity
    WHERE product_id = NEW.product_id;
END;

-- Stored Procedure to Process Refund
DELIMITER $$

CREATE PROCEDURE ProcessRefund(IN order_id INT)
BEGIN
    DECLARE order_amount DECIMAL(10, 2);
    DECLARE payment_amount DECIMAL(10, 2);
    
    -- Get the total order amount
    SELECT total_amount INTO order_amount 
    FROM orders 
    WHERE order_id = order_id;
    
    -- Get the payment amount
    SELECT payment_amount INTO payment_amount 
    FROM payments 
    WHERE order_id = order_id;

    -- Check if payment amount matches order amount
    IF payment_amount = order_amount THEN
        -- Process refund (update payment status to refunded)
        UPDATE payments 
        SET payment_method = 'Refunded' 
        WHERE order_id = order_id;
        
        -- Update order status to refunded
        UPDATE orders 
        SET order_status = 'Refunded' 
        WHERE order_id = order_id;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Payment amount mismatch. Refund failed.';
    END IF;
END$$

DELIMITER ;

-- ============================
-- 5. Example Use Cases
-- ============================

-- Get Detailed Order Information
SELECT 
    o.order_id, 
    o.order_date, 
    c.name AS customer_name, 
    p.product_name, 
    oi.quantity, 
    oi.unit_price, 
    oi.quantity * oi.unit_price AS item_total
FROM 
    orders o
JOIN 
    order_items oi ON o.order_id = oi.order_id
JOIN 
    products p ON oi.product_id = p.product_id
JOIN 
    customers c ON o.customer_id = c.customer_id;

-- Process a Refund for an Order
CALL ProcessRefund(1);  -- Assume 1 is an order_id
